{"version":3,"sources":["App.js","index.js"],"names":["App","useState","rpnInput","setRpnInput","validation","setValidation","result","setResult","className","type","onChange","e","target","value","id","placeholder","onClick","expr","split","stack","length","numberPattern","RegExp","match","operands","operators","i","isNaN","isFinite","push","a","pop","b","parseFloat","sum","res","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAoGeA,MAhGf,WAEE,MAAgCC,mBAAS,IAAzC,mBAAQC,EAAR,KAAiBC,EAAjB,KACA,EAAmCF,mBAAS,IAA5C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAA2BJ,mBAAS,IAApC,mBAAOK,EAAP,KAAcC,EAAd,KAiFA,OACE,yBAAKC,UAAU,OACb,kEACA,2BAAOC,KAAK,OAAOC,SAAU,SAACC,GAAKR,EAAYQ,EAAEC,OAAOC,OAAOR,EAAc,KAAMQ,MAAOX,EAASI,EAAQQ,GAAG,UAAUC,YAAY,mDACpI,4BAAQC,QAnFF,WACZb,EAAY,IACZI,EAAU,IACVF,EAAc,MAgFR,SACA,4BAAQW,QA9EC,WACb,IAAIC,EAAOf,EAASgB,MAAM,KACtBC,EAAO,GACX,GAAiB,IAAdF,EAAKG,OAIR,GAAc,KAAXlB,EAAH,CAKA,IAAImB,EAAe,IAAIC,OAAO,eAE9B,GAAIpB,EAASqB,MAAMF,GAChBhB,EAAc,sDADjB,CAMA,IAFD,IAAImB,EAAS,EACTC,EAAU,EACLC,EAAE,EAAGA,EAAET,EAAKG,OAAQM,IAC1B,IAAIC,MAAMV,EAAKS,KAAOE,SAASX,EAAKS,IAClCP,EAAMU,KAAKZ,EAAKS,IAChBF,QACE,CACJ,IAAIM,EAAIX,EAAMY,MACVC,EAAIb,EAAMY,MACd,GAAe,MAAZd,EAAKS,GACNP,EAAMU,KAAKI,WAAWH,GAAKG,WAAWD,IACtCP,SACK,GAAe,MAAZR,EAAKS,GACXP,EAAMU,KAAKI,WAAWD,GAAKC,WAAWH,IACtCL,SACG,GAAe,MAAZR,EAAKS,GACXP,EAAMU,KAAKI,WAAWH,GAAKG,WAAWD,IACtCP,QACG,IAAe,MAAZR,EAAKS,GAMb,YADArB,EAAc,kDAJZc,EAAMU,KAAKI,WAAWD,GAAKC,WAAWH,IACtCL,KAUR,IAAIS,EAAIV,EAASC,EACjB,GAAGA,GAAWD,EAEZnB,EAAc,2DAKV,GAAU,IAAP6B,EAOT,GAAGf,EAAMC,OAAS,EACjBf,EAAc,4BADf,CAIE,IAAI8B,EAAI,IACRA,GAAKhB,EAAM,GACZZ,EAAW4B,QAZV9B,EAAc,2DAjDZA,EAAc,oCAJdA,EAAc,0BA0EZ,WACA,yBAAKG,UAAU,cAAcJ,KCzFnCgC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.3b762190.chunk.js","sourcesContent":["import React,{useState} from \"react\";\r\nimport './App.css';\r\n\r\n\r\nfunction App() {\r\n\r\n  const  [rpnInput,setRpnInput] = useState(\"\");\r\n  const [validation,setValidation] = useState(\"\");\r\n  const [result,setResult] = useState(\"\");\r\n  \r\nconst clear=()=>{\r\nsetRpnInput(\"\");\r\nsetResult(\"\");\r\nsetValidation(\"\");\r\n\r\n}\r\nconst compute =()=>{\r\n  let expr = rpnInput.split(\",\");\r\n  let stack =[];\r\n  if(expr.length===1){\r\n    setValidation(\"Something went wrong\");\r\n    return;\r\n  }\r\n  if(rpnInput===\"\"){\r\n    setValidation(\"You did not enter anything!\")\r\n    return;\r\n  }\r\n\r\n  var numberPattern =new RegExp(/^[A-Za-z]+$/); \r\n  \r\n  if (rpnInput.match(numberPattern)) {\r\n     setValidation(\"Only numbers and aritmetic operators are valid\");\r\n     return;\r\n  }\r\n let operands=0;\r\n let operators=0;\r\n  for(let i=0; i<expr.length; i++) {\r\n    if(!isNaN(expr[i]) && isFinite(expr[i])) {\r\n      stack.push(expr[i]);\r\n      operands++;\r\n  }else {\r\n    let a = stack.pop();\r\n    let b = stack.pop();\r\n    if(expr[i] === \"+\") {\r\n      stack.push(parseFloat(a) + parseFloat(b));\r\n      operators++;\r\n    } else if(expr[i] === \"-\") {\r\n        stack.push(parseFloat(b) - parseFloat(a));\r\n        operators++;\r\n    } else if(expr[i] === \"*\") {\r\n        stack.push(parseFloat(a) * parseFloat(b));\r\n        operators++;\r\n    } else if(expr[i] === \"/\") {\r\n        stack.push(parseFloat(b) / parseFloat(a));\r\n        operators++;\r\n    }\r\n    else{\r\n      setValidation(\"Only numbers and aritmetic operators are valid\");\r\n      return;\r\n    }\r\n  }\r\n\r\n\r\n}\r\nlet sum=operands-operators;\r\nif(operators>=operands)\r\n{\r\n  setValidation(\"something went wrong!Check the number of OPERATORS\");\r\n  return;\r\n\r\n\r\n\r\n}else if(sum !==1){\r\n  setValidation(\"something went wrong!Check the number of OPERANDS\");\r\n  return;\r\n}\r\n\r\n\r\n\r\nif(stack.length > 1) {\r\n setValidation(\"something went wrong\")\r\n return;\r\n}else {\r\n  let res=\"=\"\r\n  res+=stack[0];\r\n setResult( res);\r\n}\r\n \r\n}\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Reverse Polish Notation Calculator</h1>\r\n      <input type=\"text\" onChange={(e)=>{setRpnInput(e.target.value);setValidation(\"\")}} value={rpnInput+result} id=\"operand\" placeholder=\"Enter the operand and operator:2,6,5,5,4,+,-,/\"/> \r\n      <button onClick={clear}  >Clear</button>\r\n      <button onClick={compute}>Compute</button>\r\n      <div className=\"validation\">{validation}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n\r\n"],"sourceRoot":""}